name: Elixir CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  MIX_ENV: test

jobs:
  build:

    runs-on: ubuntu-18.04

    strategy:
      matrix:
        elixir: [1.10.3]
        otp: [23.0]
    
    services:
      db:
        image: postgres:12
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: recake_test
        ports: ['5432:5432']
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
    - uses: actions/checkout@v2
      
    - name: Setup elixir
      uses: actions/setup-elixir@v1
      with:
        elixir-version: ${{ matrix.elixir }} # Define the elixir version [required]
        otp-version: ${{ matrix.otp }} # Define the OTP version [required]
    
    - name: Setup node
      uses: actions/setup-node@v1
      with:
        node-version: 13.8
    
    - name: Retrieve Mix Dependencies Cache
      uses: actions/cache@v1
      id: mix-cache
      with:
        path: deps
        key: ${{ runner.os }}-${{ matrix.otp }}-${{ matrix.elixir }}-mix-${{ hashFiles(format('{0}{1}', github.workspace, '/mix.lock')) }}
    
    - name: Retrieve Node Dependencies Cache
      uses: actions/cache@v1
      id: node-cache
      with:
        path: assets/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles(format('{0}{1}', github.workspace, '/assets/package-lock.json')) }}
    
    - name: Install Mix Dependencies
      if: steps.mix-cache.outputs.cache-hit != 'true'
      run: |
        mix local.rebar --force
        mix local.hex --force
        mix deps.get
    
    - name: Install Mix Dependencies
      if: steps.node-cache.outputs.cache-hit != 'true'
      run: (cd assets && npm install)
    
    - name: Run Tests
      run: mix test

    - name: Build release
      run: |
        NODE_ENV=production npm run deploy --prefix assets
        MIX_ENV=prod mix phx.digest
        MIX_ENV=prod mix release

    - name: Deploy files - staging
      uses: appleboy/scp-action@master
      with:
        host: staging.recake.se
        username: recake_deploy
        key: ${{ secrets.STAGING_KEY }}
        passphrase: ${{ secrets.STAGING_PASSPHRASE }}
        source: './_build/prod/rel/recake/'
        target: '~/staging/'
        strip_components: 5

    - name: Run db migrations - staging
      uses: appleboy/ssh-action@master
      with:
        host: staging.recake.se
        username: recake_deploy
        key: ${{ secrets.STAGING_KEY }}
        passphrase: ${{ secrets.STAGING_PASSPHRASE }}
        script: bash ~/migrate_staging.sh

    - name: Deploy files - production
      uses: appleboy/scp-action@master
      with:
        host: app.recake.se
        username: recake_deploy
        key: ${{ secrets.STAGING_KEY }}
        passphrase: ${{ secrets.STAGING_PASSPHRASE }}
        source: './_build/prod/rel/recake/'
        target: '~/production/'
        strip_components: 5

    - name: Run db migrations - production
      uses: appleboy/ssh-action@master
      with:
        host: app.recake.se
        username: recake_deploy
        key: ${{ secrets.STAGING_KEY }}
        passphrase: ${{ secrets.STAGING_PASSPHRASE }}
        script: bash ~/migrate_production.sh
