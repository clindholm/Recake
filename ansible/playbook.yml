---
- hosts: all
  become: true
  vars_files:
    - vars/secrets.yml
  vars:
    main_user: "recake"
    main_user_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
    deploy_user: "recake_deploy"
    deploy_user_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/recake_github.pub') }}"
    staging_db_name: "recake_db_staging"
    staging_db_username: "recake_user_staging"
    production_db_name: "recake_db_production"
    production_db_username: "recake_user_production"
  
  tasks:
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

# Sudo group setup

    - name: Check for 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# User + Key setup

    - name: Create user with sudo privileges
      user:
        name: "{{ main_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ main_user }}"
        state: present
        key: "{{ main_user_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'

    - name: Create deploy user
      user:
        name: "{{ deploy_user }}"
        state: present
        append: true
        create_home: true
        shell: /bin/bash

# Install packages

    - name: Update apt
      apt: update_cache=yes

    - name: Install required packages
      apt: 
        name: ['ufw', 'unattended-upgrades', 'python3-pip', 'libpq-dev', 'acl']
        state: latest

    - name: pip install psycopg
      shell: pip3 install psycopg2

# Setup unattended-upgrades

    - name: Update-Package-Lists frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Update-Package-Lists'
        line: 'APT::Periodic::Update-Package-Lists "1";'

    - name: Unattended-Upgrade frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Unattended-Upgrade'
        line: 'APT::Periodic::Unattended-Upgrade "1";'

    - name: Download-Upgradeable-Packages frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Download-Upgradeable-Packages'
        line: 'APT::Periodic::Download-Upgradeable-Packages "1";'

    - name: APT::Periodic::AutocleanInterval frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::APT::Periodic::AutocleanInterval'
        line: 'APT::Periodic::APT::Periodic::AutocleanInterval "7";'


# Caddy

    - name: Add Caddy sources
      lineinfile: 
        path: /etc/apt/sources.list.d/caddy-fury.list 
        state: present
        create: yes
        regexp: '^deb [trusted=yes] https://apt.fury.io/caddy/'
        line: 'deb [trusted=yes] https://apt.fury.io/caddy/ /'

    - name: Update apt
      apt: update_cache=yes
      
    - name: Install Caddy
      apt: name=caddy state=latest

    - name: Setup Caddyfile
      template:
        src: templates/Caddyfile.j2
        dest: /etc/caddy/Caddyfile

    - name: Setup shared/temporary index.html
      copy:
        src: templates/index.html
        dest: /usr/share/caddy/index.html

    - name: reload Caddy
      systemd:
        name: caddy
        state: reloaded

# UFW Setup

    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Allow HTTP
      ufw:
        rule: allow
        port: '80'

    - name: UFW - Allow HTTPS
      ufw:
        rule: allow
        port: '443'

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

# Postgres
    # - name: Add Postgres sources
    #   lineinfile: 
    #     path: /etc/apt/sources.list.d/pgdg.list 
    #     state: present
    #     create: yes
    #     regexp: '^deb http://apt.postgresql.org'
    #     line: 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'

    # - name: Add Postgres apt key
    #   apt_key:
    #     url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
    #     state: present

    - name: Update apt
      apt: update_cache=yes
      
    - name: Install Postgres
      apt: name=postgresql state=latest

    - name: Ensure Postgres is running
      service: name=postgresql state=started enabled=yes

    - name: Create database
      postgresql_db:
        name: "{{ staging_db_name }}"
      become_user: postgres

    - name: Create db user
      postgresql_user:
        db: "{{ staging_db_name }}"
        name: "{{ staging_db_username }}"
        password: "{{ staging_db_password }}"
        priv: ALL
        role_attr_flags: NOCREATEDB
        state: present
      become_user: postgres

# Recake service

    # - name: Setup systemd file
    #   template:
    #     src: templates/recake.service.j2
    #     dest: /etc/systemd/system/recake.service

    # - name: Reload Systemd
    #   systemd:
    #     daemon_reload: yes

    # - name: Enable Recake service
    #   systemd:
    #     name: recake
    #     state: started
    #     enabled: yes

    