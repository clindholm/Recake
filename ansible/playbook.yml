---
- hosts: all
  become: true
  vars_files:
    - vars/secrets.yml
  vars:
    config_system_locale: en_US.UTF-8
    config_system_language: en_US.UTF-8
    main_user: "recake"
    main_user_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/id_rsa.pub') }}"
    deploy_user: "recake_deploy"
    deploy_user_key: "{{ lookup('file', lookup('env', 'HOME') + '/.ssh/recake_github.pub') }}"
    staging_port: 4500
    staging_db_name: "recake_db_staging"
    staging_db_username: "recake_user_staging"
    production_port: 4800
    production_db_name: "recake_db_production"
    production_db_username: "recake_user_production"
  
  tasks:
    - name: Install prerequisites
      apt: name=aptitude update_cache=yes state=latest force_apt_get=yes

# Sudo group setup

    - name: Check for 'wheel' group
      group:
        name: wheel
        state: present

    - name: Allow 'wheel' group to have passwordless sudo
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^%wheel'
        line: '%wheel ALL=(ALL) NOPASSWD: ALL'
        validate: '/usr/sbin/visudo -cf %s'

# User + Key setup

    - name: Create user with sudo privileges
      user:
        name: "{{ main_user }}"
        state: present
        groups: wheel
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for remote user
      authorized_key:
        user: "{{ main_user }}"
        state: present
        key: "{{ main_user_key }}"

    - name: Disable password authentication for root
      lineinfile:
        path: /etc/ssh/sshd_config
        state: present
        regexp: '^#?PermitRootLogin'
        line: 'PermitRootLogin prohibit-password'

    - name: Create deploy user
      user:
        name: "{{ deploy_user }}"
        state: present
        append: true
        create_home: true
        shell: /bin/bash

    - name: Set authorized key for deploy user
      authorized_key:
        user: "{{ deploy_user }}"
        state: present
        key: "{{ deploy_user_key }}"

    - name: Allow deploy_user to start staging service
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl start recake_staging'
        line: '{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl start recake_staging'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Allow deploy_user to stop staging service
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop recake_staging'
        line: '{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop recake_staging'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Allow deploy_user to start production service
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl start recake_production'
        line: '{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl start recake_production'
        validate: '/usr/sbin/visudo -cf %s'

    - name: Allow deploy_user to stop production service
      lineinfile:
        path: /etc/sudoers
        state: present
        regexp: '^{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop recake_production'
        line: '{{ deploy_user }} ALL=(ALL) NOPASSWD: /bin/systemctl stop recake_production'
        validate: '/usr/sbin/visudo -cf %s'

# Install packages
    - name: Add older APT repo
      apt_repository:
        repo: deb http://security.ubuntu.com/ubuntu xenial-security main
        state: present

    - name: Install required packages
      apt: 
        name: ['ufw', 'unattended-upgrades', 'libpq-dev', 'python3-pip', 'acl', 'libicu55']
        state: latest
        update_cache: yes

    - name: pip install psycopg
      pip: 
        name: psycopg2
        executable: pip3

# Setup locales
    - name: Ensure localisation files for '{{ config_system_locale }}' are available
      locale_gen:
        name: "{{ config_system_locale }}"
        state: present

    - name: Ensure localisation files for '{{ config_system_language }}' are available
      locale_gen:
        name: "{{ config_system_language }}"
        state: present

    - name: Get current locale and language configuration
      command: localectl status
      register: locale_status
      changed_when: false

    - name: Parse 'LANG' from current locale and language configuration
      set_fact:
        locale_lang: "{{ locale_status.stdout | regex_search('LANG=([^\n]+)', '\\1') | first }}"

    - name: Parse 'LANGUAGE' from current locale and language configuration
      set_fact:
        locale_language: "{{ locale_status.stdout | regex_search('LANGUAGE=([^\n]+)', '\\1') | default([locale_lang], true) | first }}"

    - name: Configure locale to '{{ config_system_locale }}' and language to '{{ config_system_language }}'
      command: localectl set-locale LANG={{ config_system_locale }} LANGUAGE={{ config_system_language }}
      changed_when: locale_lang != config_system_locale or locale_language != config_system_language

# Setup unattended-upgrades

    - name: Update-Package-Lists frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Update-Package-Lists'
        line: 'APT::Periodic::Update-Package-Lists "1";'

    - name: Unattended-Upgrade frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Unattended-Upgrade'
        line: 'APT::Periodic::Unattended-Upgrade "1";'

    - name: Download-Upgradeable-Packages frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::Download-Upgradeable-Packages'
        line: 'APT::Periodic::Download-Upgradeable-Packages "1";'

    - name: APT::Periodic::AutocleanInterval frequency
      lineinfile:
        path: /etc/apt/apt.conf.d/20auto-upgrades
        state: present
        regexp: '^APT::Periodic::APT::Periodic::AutocleanInterval'
        line: 'APT::Periodic::APT::Periodic::AutocleanInterval "7";'


# Caddy

    - name: Add Caddy sources
      lineinfile: 
        path: /etc/apt/sources.list.d/caddy-fury.list 
        state: present
        create: yes
        regexp: '^deb [trusted=yes] https://apt.fury.io/caddy/'
        line: 'deb [trusted=yes] https://apt.fury.io/caddy/ /'

    - name: Install Caddy
      apt: name=caddy state=latest update_cache=yes

    - name: Setup Caddyfile
      template:
        src: templates/Caddyfile.j2
        dest: /etc/caddy/Caddyfile
      register: caddyfile

    - name: Setup shared/temporary index.html
      copy:
        src: templates/index.html
        dest: /usr/share/caddy/index.html

    - name: reload Caddy
      systemd:
        name: caddy
        state: reloaded
      when: caddyfile.changed

# UFW Setup

    - name: UFW - Allow SSH connections
      ufw:
        rule: allow
        name: OpenSSH

    - name: UFW - Allow HTTP
      ufw:
        rule: allow
        port: '80'

    - name: UFW - Allow HTTPS
      ufw:
        rule: allow
        port: '443'

    - name: UFW - Deny all other incoming traffic by default
      ufw:
        state: enabled
        policy: deny
        direction: incoming

# Postgres
    - name: Add Postgres sources
      lineinfile: 
        path: /etc/apt/sources.list.d/pgdg.list 
        state: present
        create: yes
        regexp: '^deb http://apt.postgresql.org'
        line: 'deb http://apt.postgresql.org/pub/repos/apt/ xenial-pgdg main'

    - name: Add Postgres apt key
      apt_key:
        url: "https://www.postgresql.org/media/keys/ACCC4CF8.asc"
        state: present
     
    - name: Install Postgres
      apt: name=postgresql-12 state=latest update_cache=yes

    - name: Ensure Postgres is running
      service: name=postgresql state=started enabled=yes

    - name: Create staging database
      postgresql_db:
        name: "{{ staging_db_name }}"
      become_user: postgres

    - name: Create staging db user
      postgresql_user:
        db: "{{ staging_db_name }}"
        name: "{{ staging_db_username }}"
        password: "{{ staging_db_password }}"
        priv: ALL
        role_attr_flags: NOCREATEDB
        state: present
      become_user: postgres

    - name: Create production database
      postgresql_db:
        name: "{{ production_db_name }}"
      become_user: postgres

    - name: Create production db user
      postgresql_user:
        db: "{{ production_db_name }}"
        name: "{{ production_db_username }}"
        password: "{{ production_db_password }}"
        priv: ALL
        role_attr_flags: NOCREATEDB
        state: present
      become_user: postgres
    
    - name: Install citext - staging
      postgresql_ext:
        db: "{{ staging_db_name }}"
        name: citext
      become_user: postgres

    - name: Install citext - production
      postgresql_ext:
        db: "{{ production_db_name }}"
        name: citext
      become_user: postgres

# Deploy
    - name: Copy db migration script - staging
      template:
        src: templates/migrate.sh.j2
        dest: /home/{{ deploy_user }}/migrate_staging.sh
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rwx,g=r,o=r
      vars:
        service: recake_staging
        path: "/home/{{ deploy_user }}/staging"
        host: staging.recake.se
        secret_key_base: "{{ staging_secret_key_base }}"
        db_url: "postgresql://{{ staging_db_username }}:{{ staging_db_password }}@localhost/{{ staging_db_name }}"
    
    - name: Copy db migration script - production
      template:
        src: templates/migrate.sh.j2
        dest: /home/{{ deploy_user }}/migrate_production.sh
        owner: "{{ deploy_user }}"
        group: "{{ deploy_user }}"
        mode: u=rwx,g=r,o=r
      vars:
        service: recake_production
        path: "/home/{{ deploy_user }}/production"
        host: app.recake.se
        secret_key_base: "{{ production_secret_key_base }}"
        db_url: "postgresql://{{ production_db_username }}:{{ production_db_password }}@localhost/{{ production_db_name }}"

# Recake service

    - name: Setup systemd file - staging
      template:
        src: templates/systemd.service.j2
        dest: /etc/systemd/system/recake_staging.service
      vars:
        user: "{{ deploy_user }}"
        server_type: "Staging"
        working_directory: /home/{{ deploy_user }}/staging
        domain: staging.recake.se
        port: "{{ staging_port }}"
        secret_key_base: "{{ staging_secret_key_base }}"
        db_url: "postgresql://{{ staging_db_username }}:{{ staging_db_password }}@localhost/{{ staging_db_name }}"
        syslog_id: "recake_staging"
      register: staging_service

    - name: Reload Systemd - staging
      systemd:
        daemon_reload: yes
      when: staging_service.changed

    - name: Enable Recake service - staging
      systemd:
        name: recake_staging
        state: started
        enabled: yes

    - name: Setup systemd file - production
      template:
        src: templates/systemd.service.j2
        dest: /etc/systemd/system/recake_production.service
      vars:
        user: "{{ deploy_user }}"
        server_type: "production"
        working_directory: /home/{{ deploy_user }}/production
        domain: app.recake.se
        port: "{{ production_port }}"
        secret_key_base: "{{ production_secret_key_base }}"
        db_url: "postgresql://{{ production_db_username }}:{{ production_db_password }}@localhost/{{ production_db_name }}"
        syslog_id: "recake_production"
      register: production_service

    - name: Reload Systemd - production
      systemd:
        daemon_reload: yes
      when: production_service.changed

    - name: Enable Recake service - production
      systemd:
        name: recake_production
        state: started
        enabled: yes